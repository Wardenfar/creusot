module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Unnest_Unnest_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val unnest [@cfg:stackify] (x : borrowed (borrowed uint32)) : borrowed uint32
    ensures { [#"../unnest.rs" 7 10 20]  ^  * x =  ^  ^ x }
    ensures { [#"../unnest.rs" 6 10 24]  ^ result =  *  ^ x }
    ensures { [#"../unnest.rs" 5 10 24]  * result =  *  * x }
    
end
module Unnest_Unnest
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = borrowed uint32
  let rec cfg unnest [@cfg:stackify] [#"../unnest.rs" 8 0 64] (x : borrowed (borrowed uint32)) : borrowed uint32
    ensures { [#"../unnest.rs" 7 10 20]  ^  * x =  ^  ^ x }
    ensures { [#"../unnest.rs" 6 10 24]  ^ result =  *  ^ x }
    ensures { [#"../unnest.rs" 5 10 24]  * result =  *  * x }
    
   =
  var _0 : borrowed uint32;
  var x_1 : borrowed (borrowed uint32);
  var _2 : borrowed uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _2 <- borrow_mut ( *  * x_1);
    x_1 <- { x_1 with current = { ( * x_1) with current = ( ^ _2) } };
    assume { Resolve0.resolve x_1 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve1.resolve _2 };
    return _0
  }
  
end
