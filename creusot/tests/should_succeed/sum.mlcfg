module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module Sum_SumFirstN_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  val sum_first_n [@cfg:stackify] (n : uint32) : uint32
    requires {[#"../sum.rs" 6 11 20] UInt32.to_int n < 1000}
    ensures { [#"../sum.rs" 7 10 38] UInt32.to_int result = UInt32.to_int n * UInt32.to_int n + div 1 2 }
    
end
module Sum_SumFirstN
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  let rec cfg sum_first_n [@cfg:stackify] [#"../sum.rs" 8 0 33] (n : uint32) : uint32
    requires {[#"../sum.rs" 6 11 20] UInt32.to_int n < 1000}
    ensures { [#"../sum.rs" 7 10 38] UInt32.to_int result = UInt32.to_int n * UInt32.to_int n + div 1 2 }
    
   =
  var _0 : uint32;
  var n_1 : uint32;
  var sum_2 : uint32;
  var i_3 : uint32;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : uint32;
  var _10 : ();
  var _11 : ();
  var _12 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    sum_2 <- (0 : uint32);
    i_3 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant bound { [#"../sum.rs" 11 23 29] i_3 <= n_1 };
    invariant sum_value { [#"../sum.rs" 12 27 52] UInt32.to_int sum_2 = UInt32.to_int i_3 * UInt32.to_int i_3 + div 1 2 };
    _7 <- i_3;
    _8 <- n_1;
    _6 <- ([#"../sum.rs" 13 10 15] _7 < _8);
    switch (_6)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    i_3 <- ([#"../sum.rs" 14 8 14] i_3 + (1 : uint32));
    _9 <- i_3;
    sum_2 <- ([#"../sum.rs" 15 8 16] sum_2 + _9);
    _5 <- ();
    goto BB1
  }
  BB3 {
    _4 <- ();
    _0 <- sum_2;
    return _0
  }
  
end
