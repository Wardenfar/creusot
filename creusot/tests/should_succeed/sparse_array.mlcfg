module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type sparsearray_sparse 't =
    | SparseArray_Sparse usize usize (alloc_vec_vec 't (alloc_alloc_global)) (alloc_vec_vec usize (alloc_alloc_global)) (alloc_vec_vec usize (alloc_alloc_global))
    
  let function sparsearray_sparse_Sparse_size (self : sparsearray_sparse 't) : usize =
    match (self) with
      | SparseArray_Sparse a _ _ _ _ -> a
      end
  let function sparsearray_sparse_Sparse_idx (self : sparsearray_sparse 't) : alloc_vec_vec usize (alloc_alloc_global) =
    match (self) with
      | SparseArray_Sparse _ _ _ a _ -> a
      end
  let function sparsearray_sparse_Sparse_n (self : sparsearray_sparse 't) : usize =
    match (self) with
      | SparseArray_Sparse _ a _ _ _ -> a
      end
  let function sparsearray_sparse_Sparse_back (self : sparsearray_sparse 't) : alloc_vec_vec usize (alloc_alloc_global)
   =
    match (self) with
      | SparseArray_Sparse _ _ _ _ a -> a
      end
  let function sparsearray_sparse_Sparse_values (self : sparsearray_sparse 't) : alloc_vec_vec 't (alloc_alloc_global) =
    match (self) with
      | SparseArray_Sparse _ _ a _ _ -> a
      end
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Logic_Int_Impl24_ModelTy
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Int_Impl24
  
end
module CreusotContracts_Logic_Int_Impl24_Model_Interface
  use mach.int.Int
  use mach.int.Int32
  function model (self : int32) : int
end
module CreusotContracts_Logic_Int_Impl24_Model
  use mach.int.Int
  use mach.int.Int32
  function model (self : int32) : int =
    Int32.to_int self
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module SparseArray_Impl1_IsElt_Interface
  type t
  use prelude.Prelude
  use Type
  use mach.int.Int
  predicate is_elt (self : Type.sparsearray_sparse t) (i : int)
end
module SparseArray_Impl1_IsElt
  type t
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  predicate is_elt [#"../sparse_array.rs" 54 4 36] (self : Type.sparsearray_sparse t) (i : int) =
    [#"../sparse_array.rs" 55 20 66] 0 <= i && i < UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && UInt64.to_int (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_idx self)) i) < UInt64.to_int (Type.sparsearray_sparse_Sparse_n self) && UInt64.to_int (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_back self)) (UInt64.to_int (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_idx self)) i))) = i
end
module SparseArray_Impl0_Model_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  clone SparseArray_Impl1_IsElt_Interface as IsElt0 with type t = t
  function model (self : Type.sparsearray_sparse t) : Seq.seq (Type.core_option_option t)
end
module SparseArray_Impl0_Model
  type t
  use mach.int.Int
  use seq.Seq
  use Type
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  clone SparseArray_Impl1_IsElt_Interface as IsElt0 with type t = t
  function model [#"../sparse_array.rs" 40 4 35] (self : Type.sparsearray_sparse t) : Seq.seq (Type.core_option_option t)
    
  axiom model_spec : forall self : Type.sparsearray_sparse t . ([#"../sparse_array.rs" 36 14 42] Seq.length (model self) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size self)) && ([#"../sparse_array.rs" 37 4 6] forall i : (int) . Seq.get (model self) i = (if IsElt0.is_elt self i then
    Type.Core_Option_Option_Some (Seq.get (Model0.model (Type.sparsearray_sparse_Sparse_values self)) i)
  else
    Type.Core_Option_Option_None
  ))
end
module SparseArray_Impl0_ModelTy
  type t
  use seq.Seq
  use Type
  type modelTy  =
    Seq.seq (Type.core_option_option t)
end
module SparseArray_Impl1_SparseInv_Interface
  type t
  use prelude.Prelude
  use Type
  predicate sparse_inv (self : Type.sparsearray_sparse t)
end
module SparseArray_Impl1_SparseInv
  type t
  use prelude.Prelude
  use Type
  use mach.int.UInt64
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = usize, type a = Type.alloc_alloc_global,
  axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  clone SparseArray_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate sparse_inv [#"../sparse_array.rs" 64 4 32] (self : Type.sparsearray_sparse t) =
    [#"../sparse_array.rs" 65 8 9] UInt64.to_int (Type.sparsearray_sparse_Sparse_n self) <= UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && Seq.length (Model0.model self) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && Seq.length (Model1.model (Type.sparsearray_sparse_Sparse_values self)) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && Seq.length (Model2.model (Type.sparsearray_sparse_Sparse_idx self)) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && Seq.length (Model2.model (Type.sparsearray_sparse_Sparse_back self)) = UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && (forall i : (int) . 0 <= i && i < UInt64.to_int (Type.sparsearray_sparse_Sparse_n self) -> match (Seq.get (Model2.model (Type.sparsearray_sparse_Sparse_back self)) i) with
      | j -> 0 <= UInt64.to_int j && UInt64.to_int j < UInt64.to_int (Type.sparsearray_sparse_Sparse_size self) && UInt64.to_int (Seq.get (Model2.model (Type.sparsearray_sparse_Sparse_idx self)) (UInt64.to_int j)) = i
      end)
end
module SparseArray_Impl0
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl0_Model as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model2.model, axiom .
  clone SparseArray_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.sparsearray_sparse t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.sparsearray_sparse t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module SparseArray_Create_Interface
  type t
  use mach.int.Int
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.UInt64
  clone SparseArray_Impl1_SparseInv_Interface as SparseInv0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  clone SparseArray_Impl1_IsElt_Interface as IsElt0 with type t = t
  clone SparseArray_Impl0_Model_Interface as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  val create [@cfg:stackify] (sz : usize) (dummy : t) : Type.sparsearray_sparse t
    ensures { [#"../sparse_array.rs" 139 0 47] forall i : (int) . Seq.get (Model0.model result) i = Type.Core_Option_Option_None }
    ensures { [#"../sparse_array.rs" 138 10 27] Type.sparsearray_sparse_Sparse_size result = sz }
    ensures { [#"../sparse_array.rs" 137 10 29] SparseInv0.sparse_inv result }
    
end
module SparseArray_Create
  type t
  use mach.int.Int
  use seq.Seq
  use Type
  use prelude.Prelude
  use mach.int.UInt64
  clone SparseArray_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl0_Model as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function Model2.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone Alloc_Vec_FromElem_Interface as FromElem1 with type t = usize, function Model0.model = Model3.model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = t, function Model0.model = Model1.model
  let rec cfg create [@cfg:stackify] [#"../sparse_array.rs" 140 0 64] (sz : usize) (dummy : t) : Type.sparsearray_sparse t
    ensures { [#"../sparse_array.rs" 139 0 47] forall i : (int) . Seq.get (Model0.model result) i = Type.Core_Option_Option_None }
    ensures { [#"../sparse_array.rs" 138 10 27] Type.sparsearray_sparse_Sparse_size result = sz }
    ensures { [#"../sparse_array.rs" 137 10 29] SparseInv0.sparse_inv result }
    
   =
  var _0 : Type.sparsearray_sparse t;
  var sz_1 : usize;
  var dummy_2 : t;
  var _3 : usize;
  var _4 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _5 : t;
  var _6 : usize;
  var _7 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _8 : usize;
  var _9 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _10 : usize;
  {
    sz_1 <- sz;
    dummy_2 <- dummy;
    goto BB0
  }
  BB0 {
    _3 <- sz_1;
    assume { Resolve0.resolve _5 };
    _5 <- dummy_2;
    assume { Resolve0.resolve dummy_2 };
    _6 <- sz_1;
    _4 <- ([#"../sparse_array.rs" 145 16 41] FromElem0.from_elem _5 _6);
    goto BB1
  }
  BB1 {
    _8 <- sz_1;
    _7 <- ([#"../sparse_array.rs" 147 13 34] FromElem1.from_elem (0 : usize) _8);
    goto BB2
  }
  BB2 {
    _10 <- sz_1;
    _9 <- ([#"../sparse_array.rs" 149 14 35] FromElem1.from_elem (0 : usize) _10);
    goto BB3
  }
  BB3 {
    _0 <- Type.SparseArray_Sparse _3 (0 : usize) _4 _7 _9;
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Prelude
  use Type
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Type.alloc_vec_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module SparseArray_Impl1_Get_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone SparseArray_Impl1_SparseInv_Interface as SparseInv0 with type t = t
  clone SparseArray_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val get [@cfg:stackify] (self : Type.sparsearray_sparse t) (i : usize) : Type.core_option_option t
    requires {[#"../sparse_array.rs" 82 15 33] UInt64.to_int i < Seq.length (Model0.model self)}
    requires {[#"../sparse_array.rs" 81 15 32] SparseInv0.sparse_inv self}
    ensures { [#"../sparse_array.rs" 87 14 5] match (Seq.get (Model0.model self) (UInt64.to_int i)) with
      | Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None
      | Type.Core_Option_Option_Some _ -> true
      end }
    ensures { [#"../sparse_array.rs" 83 14 5] match (result) with
      | Type.Core_Option_Option_None -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_None
      | Type.Core_Option_Option_Some x -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_Some x
      end }
    
end
module SparseArray_Impl1_Get
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl0_Model as Model1 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model2.model, axiom .
  clone SparseArray_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model2.model, function Model2.model = Model3.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.sparsearray_sparse t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = usize
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = t, type i = usize, type a = Type.alloc_alloc_global,
  function Model0.model = Model2.model, predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  let rec cfg get [@cfg:stackify] [#"../sparse_array.rs" 91 4 45] (self : Type.sparsearray_sparse t) (i : usize) : Type.core_option_option t
    requires {[#"../sparse_array.rs" 82 15 33] UInt64.to_int i < Seq.length (Model0.model self)}
    requires {[#"../sparse_array.rs" 81 15 32] SparseInv0.sparse_inv self}
    ensures { [#"../sparse_array.rs" 87 14 5] match (Seq.get (Model0.model self) (UInt64.to_int i)) with
      | Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None
      | Type.Core_Option_Option_Some _ -> true
      end }
    ensures { [#"../sparse_array.rs" 83 14 5] match (result) with
      | Type.Core_Option_Option_None -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_None
      | Type.Core_Option_Option_Some x -> Seq.get (Model0.model self) (UInt64.to_int i) = Type.Core_Option_Option_Some x
      end }
    
   =
  var _0 : Type.core_option_option t;
  var self_1 : Type.sparsearray_sparse t;
  var i_2 : usize;
  var index_3 : usize;
  var _4 : usize;
  var _5 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _6 : usize;
  var _7 : bool;
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _15 : usize;
  var _16 : usize;
  var _17 : t;
  var _18 : t;
  var _19 : t;
  var _20 : Type.alloc_vec_vec t (Type.alloc_alloc_global);
  var _21 : usize;
  {
    self_1 <- self;
    i_2 <- i;
    goto BB0
  }
  BB0 {
    _5 <- Type.sparsearray_sparse_Sparse_idx self_1;
    _6 <- i_2;
    _4 <- ([#"../sparse_array.rs" 92 20 31] Index0.index _5 _6);
    goto BB1
  }
  BB1 {
    index_3 <- _4;
    _9 <- index_3;
    _10 <- Type.sparsearray_sparse_Sparse_n self_1;
    _8 <- ([#"../sparse_array.rs" 93 11 25] _9 < _10);
    switch (_8)
      | False -> goto BB2
      | _ -> goto BB3
      end
  }
  BB2 {
    _7 <- false;
    goto BB4
  }
  BB3 {
    _14 <- Type.sparsearray_sparse_Sparse_back self_1;
    _15 <- index_3;
    _13 <- ([#"../sparse_array.rs" 93 29 45] Index0.index _14 _15);
    goto BB5
  }
  BB4 {
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB5 {
    _12 <- _13;
    _16 <- i_2;
    _11 <- ([#"../sparse_array.rs" 93 29 50] _12 = _16);
    _7 <- _11;
    goto BB4
  }
  BB6 {
    _20 <- Type.sparsearray_sparse_Sparse_values self_1;
    assume { Resolve0.resolve self_1 };
    _21 <- i_2;
    _19 <- ([#"../sparse_array.rs" 94 18 32] Index1.index _20 _21);
    goto BB7
  }
  BB7 {
    _18 <- _19;
    assume { Resolve1.resolve _19 };
    _17 <- _18;
    assume { Resolve1.resolve _18 };
    _0 <- Type.Core_Option_Option_Some _17;
    goto BB9
  }
  BB8 {
    assume { Resolve0.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB9
  }
  BB9 {
    return _0
  }
  
end
module SparseArray_Impl1_LemmaPermutation_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone SparseArray_Impl1_IsElt_Interface as IsElt0 with type t = t
  clone SparseArray_Impl1_SparseInv_Interface as SparseInv0 with type t = t
  function lemma_permutation (self : Type.sparsearray_sparse t) (i : int) : ()
end
module SparseArray_Impl1_LemmaPermutation
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  clone SparseArray_Impl1_IsElt_Interface as IsElt0 with type t = t
  clone SparseArray_Impl1_SparseInv_Interface as SparseInv0 with type t = t
  function lemma_permutation [#"../sparse_array.rs" 107 4 38] (self : Type.sparsearray_sparse t) (i : int) : () =
    [#"../sparse_array.rs" 102 4 12] ()
  axiom lemma_permutation_spec : forall self : Type.sparsearray_sparse t, i : int . ([#"../sparse_array.rs" 105 15 41] 0 <= i && i < UInt64.to_int (Type.sparsearray_sparse_Sparse_size self)) -> ([#"../sparse_array.rs" 104 15 34] Type.sparsearray_sparse_Sparse_n self = Type.sparsearray_sparse_Sparse_size self) -> ([#"../sparse_array.rs" 103 15 32] SparseInv0.sparse_inv self) -> ([#"../sparse_array.rs" 106 14 28] IsElt0.is_elt self i)
end
module SparseArray_Impl1_LemmaPermutation_Impl
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone SparseArray_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl0_Model as Model3 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model3.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Model2.model = Model2.model
  let rec ghost function lemma_permutation (self : Type.sparsearray_sparse t) (i : int) : ()
    requires {[#"../sparse_array.rs" 105 15 41] 0 <= i && i < UInt64.to_int (Type.sparsearray_sparse_Sparse_size self)}
    requires {[#"../sparse_array.rs" 104 15 34] Type.sparsearray_sparse_Sparse_n self = Type.sparsearray_sparse_Sparse_size self}
    requires {[#"../sparse_array.rs" 103 15 32] SparseInv0.sparse_inv self}
    ensures { [#"../sparse_array.rs" 106 14 28] IsElt0.is_elt self i }
    
   =
    [#"../sparse_array.rs" 102 4 12] ()
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone Core_Slice_Index_SliceIndex_Output as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i && i <> UInt64.to_int self && i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module SparseArray_Impl1_Set_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone SparseArray_Impl1_SparseInv_Interface as SparseInv0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  clone SparseArray_Impl1_IsElt_Interface as IsElt0 with type t = t
  clone SparseArray_Impl0_Model_Interface as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  val set [@cfg:stackify] (self : borrowed (Type.sparsearray_sparse t)) (i : usize) (v : t) : ()
    requires {[#"../sparse_array.rs" 112 15 34] UInt64.to_int i < Seq.length (Model0.model ( * self))}
    requires {[#"../sparse_array.rs" 111 15 35] SparseInv0.sparse_inv ( * self)}
    ensures { [#"../sparse_array.rs" 116 14 37] Seq.get (Model0.model ( ^ self)) (UInt64.to_int i) = Type.Core_Option_Option_Some v }
    ensures { [#"../sparse_array.rs" 115 4 69] forall j : (int) . j <> UInt64.to_int i -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures { [#"../sparse_array.rs" 114 14 46] Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { [#"../sparse_array.rs" 113 14 34] SparseInv0.sparse_inv ( ^ self) }
    
end
module SparseArray_Impl1_Set
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone SparseArray_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = t, function Model0.model = Model3.model
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl0_Model as Model0 with type t = t, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model1.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.sparsearray_sparse t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = t, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function Model2.model = Model3.model
  clone SparseArray_Impl1_LemmaPermutation as LemmaPermutation0 with type t = t,
  predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv, predicate IsElt0.is_elt = IsElt0.is_elt, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.sparsearray_sparse t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy2 with type t = usize
  clone Core_Slice_Index_Impl2_Output as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy1 with type t = t
  clone Core_Slice_Index_Impl2_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
  predicate HasValue0.has_value = HasValue1.has_value, type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = usize, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = t, type i = usize,
  type a = Type.alloc_alloc_global, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
  predicate HasValue0.has_value = HasValue0.has_value, type Output0.output = Output0.output
  let rec cfg set [@cfg:stackify] [#"../sparse_array.rs" 117 4 41] (self : borrowed (Type.sparsearray_sparse t)) (i : usize) (v : t) : ()
    requires {[#"../sparse_array.rs" 112 15 34] UInt64.to_int i < Seq.length (Model0.model ( * self))}
    requires {[#"../sparse_array.rs" 111 15 35] SparseInv0.sparse_inv ( * self)}
    ensures { [#"../sparse_array.rs" 116 14 37] Seq.get (Model0.model ( ^ self)) (UInt64.to_int i) = Type.Core_Option_Option_Some v }
    ensures { [#"../sparse_array.rs" 115 4 69] forall j : (int) . j <> UInt64.to_int i -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures { [#"../sparse_array.rs" 114 14 46] Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    ensures { [#"../sparse_array.rs" 113 14 34] SparseInv0.sparse_inv ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.sparsearray_sparse t);
  var i_2 : usize;
  var v_3 : t;
  var _4 : t;
  var _5 : borrowed t;
  var _6 : borrowed (Type.alloc_vec_vec t (Type.alloc_alloc_global));
  var _7 : usize;
  var index_8 : usize;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _11 : usize;
  var _12 : bool;
  var _13 : bool;
  var _14 : bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : bool;
  var _18 : usize;
  var _19 : usize;
  var _20 : Type.alloc_vec_vec usize (Type.alloc_alloc_global);
  var _21 : usize;
  var _22 : usize;
  var _23 : ();
  var _24 : ();
  var _25 : usize;
  var _26 : borrowed usize;
  var _27 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _28 : usize;
  var _29 : usize;
  var _30 : borrowed usize;
  var _31 : borrowed (Type.alloc_vec_vec usize (Type.alloc_alloc_global));
  var _32 : usize;
  {
    self_1 <- self;
    i_2 <- i;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    _4 <- v_3;
    _6 <- borrow_mut (Type.sparsearray_sparse_Sparse_values ( * self_1));
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a b ( ^ _6) d e) };
    _7 <- i_2;
    _5 <- ([#"../sparse_array.rs" 118 8 22] IndexMut0.index_mut _6 _7);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve ( * _5) };
    _5 <- { _5 with current = _4 };
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve _5 };
    goto BB4
  }
  BB4 {
    _10 <- Type.sparsearray_sparse_Sparse_idx ( * self_1);
    _11 <- i_2;
    _9 <- ([#"../sparse_array.rs" 119 20 31] Index0.index _10 _11);
    goto BB5
  }
  BB5 {
    index_8 <- _9;
    _15 <- index_8;
    _16 <- Type.sparsearray_sparse_Sparse_n ( * self_1);
    _14 <- ([#"../sparse_array.rs" 120 13 27] _15 < _16);
    switch (_14)
      | False -> goto BB6
      | _ -> goto BB7
      end
  }
  BB6 {
    _13 <- false;
    goto BB8
  }
  BB7 {
    _20 <- Type.sparsearray_sparse_Sparse_back ( * self_1);
    _21 <- index_8;
    _19 <- ([#"../sparse_array.rs" 120 31 47] Index0.index _20 _21);
    goto BB9
  }
  BB8 {
    _12 <- not _13;
    switch (_12)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB9 {
    _18 <- _19;
    _22 <- i_2;
    _17 <- ([#"../sparse_array.rs" 120 31 52] _18 = _22);
    _13 <- _17;
    goto BB8
  }
  BB10 {
    assert { [#"../sparse_array.rs" 122 27 53] let _ = LemmaPermutation0.lemma_permutation ( * self_1) (UInt64.to_int i_2) in true };
    _23 <- ();
    assert { [#"../sparse_array.rs" 123 26 50] UInt64.to_int (Type.sparsearray_sparse_Sparse_n ( * self_1)) < UInt64.to_int (Type.sparsearray_sparse_Sparse_size ( * self_1)) };
    _24 <- ();
    _25 <- Type.sparsearray_sparse_Sparse_n ( * self_1);
    _27 <- borrow_mut (Type.sparsearray_sparse_Sparse_idx ( * self_1));
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a b c ( ^ _27) e) };
    _28 <- i_2;
    _26 <- ([#"../sparse_array.rs" 125 12 23] IndexMut1.index_mut _27 _28);
    goto BB11
  }
  BB11 {
    _26 <- { _26 with current = _25 };
    assume { Resolve2.resolve _26 };
    _29 <- i_2;
    _31 <- borrow_mut (Type.sparsearray_sparse_Sparse_back ( * self_1));
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a b c d ( ^ _31)) };
    _32 <- Type.sparsearray_sparse_Sparse_n ( * self_1);
    _30 <- ([#"../sparse_array.rs" 126 12 29] IndexMut1.index_mut _31 _32);
    goto BB12
  }
  BB12 {
    _30 <- { _30 with current = _29 };
    assume { Resolve2.resolve _30 };
    self_1 <- { self_1 with current = (let Type.SparseArray_Sparse a b c d e =  * self_1 in Type.SparseArray_Sparse a ([#"../sparse_array.rs" 127 12 23] Type.sparsearray_sparse_Sparse_n ( * self_1) + (1 : usize)) c d e) };
    assume { Resolve3.resolve self_1 };
    _0 <- ();
    goto BB14
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    _0 <- ();
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module SparseArray_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module SparseArray_F
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Int_Impl24_Model as Model1
  clone CreusotContracts_Logic_Int_Impl24_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model5 with type t = usize, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl1_IsElt as IsElt0 with type t = int32, function Model0.model = Model5.model
  clone SparseArray_Impl0_ModelTy as ModelTy1 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = int32, type a = Type.alloc_alloc_global, axiom .
  clone SparseArray_Impl0_Model as Model2 with type t = int32, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model0.model = Model3.model, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.sparsearray_sparse int32,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  clone SparseArray_Impl1_SparseInv as SparseInv0 with type t = int32, function Model0.model = Model4.model,
  function Model1.model = Model3.model, function Model2.model = Model5.model
  clone SparseArray_Impl1_Set_Interface as Set0 with type t = int32, function Model0.model = Model2.model,
  predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model1.model = Model3.model
  clone SparseArray_Impl1_Get_Interface as Get0 with type t = int32, function Model0.model = Model4.model,
  predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv
  clone SparseArray_Create_Interface as Create0 with type t = int32, function Model0.model = Model2.model,
  predicate SparseInv0.sparse_inv = SparseInv0.sparse_inv, predicate IsElt0.is_elt = IsElt0.is_elt,
  function Model1.model = Model3.model
  let rec cfg f [@cfg:stackify] [#"../sparse_array.rs" 155 0 10] (_ : ()) : () =
  var _0 : ();
  var default_1 : int32;
  var a_2 : Type.sparsearray_sparse int32;
  var _3 : int32;
  var b_4 : Type.sparsearray_sparse int32;
  var _5 : int32;
  var x_6 : Type.core_option_option int32;
  var _7 : Type.sparsearray_sparse int32;
  var y_8 : Type.core_option_option int32;
  var _9 : Type.sparsearray_sparse int32;
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Type.sparsearray_sparse int32);
  var _13 : ();
  var _14 : borrowed (Type.sparsearray_sparse int32);
  var _15 : Type.core_option_option int32;
  var _16 : Type.sparsearray_sparse int32;
  var _17 : Type.core_option_option int32;
  var _18 : Type.sparsearray_sparse int32;
  var _19 : ();
  var _20 : ();
  var _21 : Type.core_option_option int32;
  var _22 : Type.sparsearray_sparse int32;
  var _23 : Type.core_option_option int32;
  var _24 : Type.sparsearray_sparse int32;
  var _25 : ();
  var _26 : Type.core_option_option int32;
  var _27 : Type.sparsearray_sparse int32;
  var _28 : Type.core_option_option int32;
  var _29 : Type.sparsearray_sparse int32;
  var _30 : ();
  var _31 : Type.core_option_option int32;
  var _32 : Type.sparsearray_sparse int32;
  var _33 : Type.core_option_option int32;
  var _34 : Type.sparsearray_sparse int32;
  {
    goto BB0
  }
  BB0 {
    default_1 <- (0 : int32);
    _3 <- default_1;
    a_2 <- ([#"../sparse_array.rs" 157 16 35] Create0.create (10 : usize) _3);
    goto BB1
  }
  BB1 {
    _5 <- default_1;
    b_4 <- ([#"../sparse_array.rs" 158 16 35] Create0.create (20 : usize) _5);
    goto BB2
  }
  BB2 {
    _7 <- a_2;
    x_6 <- ([#"../sparse_array.rs" 159 16 24] Get0.get _7 (5 : usize));
    goto BB3
  }
  BB3 {
    _9 <- b_4;
    y_8 <- ([#"../sparse_array.rs" 160 16 24] Get0.get _9 (7 : usize));
    goto BB4
  }
  BB4 {
    assert { [#"../sparse_array.rs" 161 18 40] x_6 = Type.Core_Option_Option_None && y_8 = Type.Core_Option_Option_None };
    _10 <- ();
    _12 <- borrow_mut a_2;
    a_2 <-  ^ _12;
    _11 <- ([#"../sparse_array.rs" 163 4 15] Set0.set _12 (5 : usize) (1 : int32));
    goto BB5
  }
  BB5 {
    _14 <- borrow_mut b_4;
    b_4 <-  ^ _14;
    _13 <- ([#"../sparse_array.rs" 164 4 15] Set0.set _14 (7 : usize) (2 : int32));
    goto BB6
  }
  BB6 {
    _16 <- a_2;
    _15 <- ([#"../sparse_array.rs" 165 8 16] Get0.get _16 (5 : usize));
    goto BB7
  }
  BB7 {
    x_6 <- _15;
    _18 <- b_4;
    _17 <- ([#"../sparse_array.rs" 166 8 16] Get0.get _18 (7 : usize));
    goto BB8
  }
  BB8 {
    y_8 <- _17;
    assert { [#"../sparse_array.rs" 167 18 5] match (x_6) with
      | Type.Core_Option_Option_None -> false
      | Type.Core_Option_Option_Some z -> Model0.model z = 1
      end };
    _19 <- ();
    assert { [#"../sparse_array.rs" 171 18 5] match (y_8) with
      | Type.Core_Option_Option_None -> false
      | Type.Core_Option_Option_Some z -> Model0.model z = 2
      end };
    _20 <- ();
    _22 <- a_2;
    _21 <- ([#"../sparse_array.rs" 176 8 16] Get0.get _22 (7 : usize));
    goto BB9
  }
  BB9 {
    x_6 <- _21;
    _24 <- b_4;
    _23 <- ([#"../sparse_array.rs" 177 8 16] Get0.get _24 (5 : usize));
    goto BB10
  }
  BB10 {
    y_8 <- _23;
    assert { [#"../sparse_array.rs" 178 18 40] x_6 = Type.Core_Option_Option_None && y_8 = Type.Core_Option_Option_None };
    _25 <- ();
    _27 <- a_2;
    _26 <- ([#"../sparse_array.rs" 180 8 16] Get0.get _27 (0 : usize));
    goto BB11
  }
  BB11 {
    x_6 <- _26;
    _29 <- b_4;
    _28 <- ([#"../sparse_array.rs" 181 8 16] Get0.get _29 (0 : usize));
    goto BB12
  }
  BB12 {
    y_8 <- _28;
    assert { [#"../sparse_array.rs" 182 18 40] x_6 = Type.Core_Option_Option_None && y_8 = Type.Core_Option_Option_None };
    _30 <- ();
    _32 <- a_2;
    _31 <- ([#"../sparse_array.rs" 184 8 16] Get0.get _32 (9 : usize));
    goto BB13
  }
  BB13 {
    x_6 <- _31;
    _34 <- b_4;
    _33 <- ([#"../sparse_array.rs" 185 8 16] Get0.get _34 (9 : usize));
    goto BB14
  }
  BB14 {
    y_8 <- _33;
    assert { [#"../sparse_array.rs" 186 18 40] x_6 = Type.Core_Option_Option_None && y_8 = Type.Core_Option_Option_None };
    _0 <- ();
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    return _0
  }
  
end
