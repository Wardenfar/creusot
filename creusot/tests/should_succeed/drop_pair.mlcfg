module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module DropPair_DropPair2_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val drop_pair2 [@cfg:stackify] (x : (borrowed uint32, borrowed uint32)) : ()
end
module DropPair_DropPair2
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = borrowed uint32,
  type t2 = borrowed uint32, predicate Resolve0.resolve = Resolve1.resolve,
  predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg drop_pair2 [@cfg:stackify] [#"../drop_pair.rs" 9 0 42] (x : (borrowed uint32, borrowed uint32)) : () =
  var _0 : ();
  var x_1 : (borrowed uint32, borrowed uint32);
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module DropPair_Drop_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  val drop [@cfg:stackify] (_x : borrowed uint32) (y : borrowed uint32) : ()
end
module DropPair_Drop
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  let rec cfg drop [@cfg:stackify] [#"../drop_pair.rs" 15 0 52] (_x : borrowed uint32) (y : borrowed uint32) : () =
  var _0 : ();
  var _x_1 : borrowed uint32;
  var y_2 : borrowed uint32;
  var _3 : borrowed uint32;
  {
    _x_1 <- _x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _x_1 };
    _3 <- borrow_mut ( * y_2);
    y_2 <- { y_2 with current = ( ^ _3) };
    assume { Resolve0.resolve y_2 };
    assume { Resolve0.resolve _x_1 };
    _x_1 <- _3;
    _0 <- ();
    return _0
  }
  
end
module DropPair_DropPair_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface as Resolve0 with type t1 = borrowed uint32,
  type t2 = borrowed uint32
  val drop_pair [@cfg:stackify] (_x : (borrowed uint32, borrowed uint32)) : ()
    ensures { [#"../drop_pair.rs" 6 10 24]  ^ (let (_, a) = _x in a) =  * (let (_, a) = _x in a) }
    ensures { [#"../drop_pair.rs" 5 10 24]  ^ (let (a, _) = _x in a) =  * (let (a, _) = _x in a) }
    ensures { [#"../drop_pair.rs" 4 10 22] Resolve0.resolve _x }
    
end
module DropPair_DropPair
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = borrowed uint32,
  type t2 = borrowed uint32, predicate Resolve0.resolve = Resolve1.resolve,
  predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg drop_pair [@cfg:stackify] [#"../drop_pair.rs" 7 0 42] (_x : (borrowed uint32, borrowed uint32)) : ()
    ensures { [#"../drop_pair.rs" 6 10 24]  ^ (let (_, a) = _x in a) =  * (let (_, a) = _x in a) }
    ensures { [#"../drop_pair.rs" 5 10 24]  ^ (let (a, _) = _x in a) =  * (let (a, _) = _x in a) }
    ensures { [#"../drop_pair.rs" 4 10 22] Resolve0.resolve _x }
    
   =
  var _0 : ();
  var _x_1 : (borrowed uint32, borrowed uint32);
  {
    _x_1 <- _x;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _x_1 };
    _0 <- ();
    return _0
  }
  
end
