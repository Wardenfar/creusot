module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type numbigint_bigint_sign  =
    | NumBigint_Bigint_Sign_Minus
    | NumBigint_Bigint_Sign_NoSign
    | NumBigint_Bigint_Sign_Plus
    
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
  type numbigint_biguint_biguint  =
    | NumBigint_Biguint_BigUint (alloc_vec_vec uint64 (alloc_alloc_global))
    
  type numbigint_bigint_bigint  =
    | NumBigint_Bigint_BigInt (numbigint_bigint_sign) (numbigint_biguint_biguint)
    
end
module CreusotContracts_Bigint_Impl0_Model_Interface
  use Type
  use mach.int.Int
  function model (self : Type.numbigint_bigint_bigint) : int
end
module CreusotContracts_Bigint_Impl0_Model
  use Type
  use mach.int.Int
  function model (self : Type.numbigint_bigint_bigint) : int
end
module NumBigint_Bigint_Convert_Impl40_From_Interface
  use mach.int.Int32
  use mach.int.Int
  use Type
  clone CreusotContracts_Bigint_Impl0_Model_Interface as Model0
  val from [@cfg:stackify] (n : int32) : Type.numbigint_bigint_bigint
    ensures { Model0.model result = Int32.to_int n }
    
end
module NumBigint_Bigint_Convert_Impl40_From
  use mach.int.Int32
  use mach.int.Int
  use Type
  clone CreusotContracts_Bigint_Impl0_Model_Interface as Model0
  val from [@cfg:stackify] (n : int32) : Type.numbigint_bigint_bigint
    ensures { Model0.model result = Int32.to_int n }
    
end
module NumBigint_Bigint_Addition_Impl3_Add_Interface
  use mach.int.Int
  use Type
  clone CreusotContracts_Bigint_Impl0_Model_Interface as Model0
  val add [@cfg:stackify] (self : Type.numbigint_bigint_bigint) (other : Type.numbigint_bigint_bigint) : Type.numbigint_bigint_bigint
    ensures { Model0.model result = Model0.model self + Model0.model other }
    
end
module NumBigint_Bigint_Addition_Impl3_Add
  use mach.int.Int
  use Type
  clone CreusotContracts_Bigint_Impl0_Model_Interface as Model0
  val add [@cfg:stackify] (self : Type.numbigint_bigint_bigint) (other : Type.numbigint_bigint_bigint) : Type.numbigint_bigint_bigint
    ensures { Model0.model result = Model0.model self + Model0.model other }
    
end
module NumBigint_Bigint_Convert_Impl40
  
end
module NumBigint_Bigint_Addition_Impl3
  
end
module CreusotContracts_Bigint_Impl0
  
end
module Bigint_Omg_Interface
  val omg [@cfg:stackify] (_ : ()) : ()
end
module Bigint_Omg
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Bigint_Impl0_Model as Model0
  clone NumBigint_Bigint_Addition_Impl3_Add_Interface as Add0 with function Model0.model = Model0.model
  clone NumBigint_Bigint_Convert_Impl40_From_Interface as From0 with function Model0.model = Model0.model
  let rec cfg omg [@cfg:stackify] [#"../bigint.rs" 19 0 8] (_ : ()) : () =
  var _0 : ();
  var a_1 : Type.numbigint_bigint_bigint;
  var b_2 : Type.numbigint_bigint_bigint;
  var _3 : Type.numbigint_bigint_bigint;
  var _4 : Type.numbigint_bigint_bigint;
  var _5 : Type.numbigint_bigint_bigint;
  {
    goto BB0
  }
  BB0 {
    a_1 <- ([#"../bigint.rs" 20 10 25] From0.from (0 : int32));
    goto BB1
  }
  BB1 {
    b_2 <- ([#"../bigint.rs" 21 10 25] From0.from (0 : int32));
    goto BB2
  }
  BB2 {
    _4 <- a_1;
    _5 <- b_2;
    _3 <- ([#"../bigint.rs" 23 10 15] Add0.add _4 _5);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _0 <- ();
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
