module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type inplacelistreversal_list 't =
    | InplaceListReversal_List_Nil
    | InplaceListReversal_List_Cons ('t, inplacelistreversal_list 't)
    
  let function inplacelistreversal_list_Cons_0 (self : inplacelistreversal_list 't) : ('t, inplacelistreversal_list 't)
   =
    match (self) with
      | InplaceListReversal_List_Nil -> any ('t, inplacelistreversal_list 't)
      | InplaceListReversal_List_Cons a -> a
      end
end
module InplaceListReversal_RevAppend_Interface
  type t
  use Type
  function rev_append (n : Type.inplacelistreversal_list t) (o : Type.inplacelistreversal_list t) : Type.inplacelistreversal_list t
    
end
module InplaceListReversal_RevAppend
  type t
  use Type
  function rev_append [#"../inplace_list_reversal.rs" 15 0 55] (n : Type.inplacelistreversal_list t) (o : Type.inplacelistreversal_list t) : Type.inplacelistreversal_list t
    
   =
    [#"../inplace_list_reversal.rs" 16 4 5] match (n) with
      | Type.InplaceListReversal_List_Nil -> o
      | Type.InplaceListReversal_List_Cons (hd, tl) -> rev_append tl (Type.InplaceListReversal_List_Cons (hd, o))
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module Core_Mem_Replace
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module InplaceListReversal_Rev_Interface
  type t
  use Type
  use prelude.Prelude
  clone InplaceListReversal_RevAppend_Interface as RevAppend0 with type t = t
  val rev [@cfg:stackify] (l : borrowed (Type.inplacelistreversal_list t)) : ()
    ensures { [#"../inplace_list_reversal.rs" 22 10 35]  ^ l = RevAppend0.rev_append ( * l) (Type.InplaceListReversal_List_Nil) }
    
end
module InplaceListReversal_Rev
  type t
  use Type
  use prelude.Prelude
  clone InplaceListReversal_RevAppend as RevAppend0 with type t = t
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = (t, Type.inplacelistreversal_list t)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.inplacelistreversal_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.inplacelistreversal_list t
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.inplacelistreversal_list t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.inplacelistreversal_list t)
  let rec cfg rev [@cfg:stackify] [#"../inplace_list_reversal.rs" 23 0 30] (l : borrowed (Type.inplacelistreversal_list t)) : ()
    ensures { [#"../inplace_list_reversal.rs" 22 10 35]  ^ l = RevAppend0.rev_append ( * l) (Type.InplaceListReversal_List_Nil) }
    
   =
  var _0 : ();
  var l_1 : borrowed (Type.inplacelistreversal_list t);
  ghost var old_l_2 : borrowed (Type.inplacelistreversal_list t);
  var _3 : ();
  var prev_4 : Type.inplacelistreversal_list t;
  var head_5 : Type.inplacelistreversal_list t;
  var _6 : borrowed (Type.inplacelistreversal_list t);
  var _7 : Type.inplacelistreversal_list t;
  var _8 : ();
  var _9 : ();
  var _10 : isize;
  var curr_11 : (t, Type.inplacelistreversal_list t);
  var next_12 : Type.inplacelistreversal_list t;
  var _13 : Type.inplacelistreversal_list t;
  var _14 : Type.inplacelistreversal_list t;
  var _15 : (t, Type.inplacelistreversal_list t);
  var _16 : Type.inplacelistreversal_list t;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : Type.inplacelistreversal_list t;
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_l_2 <- ghost ([#"../inplace_list_reversal.rs" 24 16 28] l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_l_2 };
    prev_4 <- Type.InplaceListReversal_List_Nil;
    _6 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _6) };
    _7 <- Type.InplaceListReversal_List_Nil;
    head_5 <- ([#"../inplace_list_reversal.rs" 26 19 34] Replace0.replace _6 _7);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant x { [#"../inplace_list_reversal.rs" 27 19 76] RevAppend0.rev_append head_5 prev_4 = RevAppend0.rev_append ( * old_l_2) (Type.InplaceListReversal_List_Nil) };
    switch (head_5)
      | Type.InplaceListReversal_List_Cons _ -> goto BB5
      | _ -> goto BB14
      end
  }
  BB5 {
    assume { Resolve3.resolve curr_11 };
    curr_11 <- Type.inplacelistreversal_list_Cons_0 head_5;
    assume { Resolve1.resolve next_12 };
    next_12 <- (let (_, a) = curr_11 in a);
    assume { Resolve1.resolve _13 };
    _13 <- prev_4;
    assume { Resolve1.resolve (let (_, a) = curr_11 in a) };
    curr_11 <- (let (a, b) = curr_11 in (a, _13));
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _15 };
    _15 <- curr_11;
    _14 <- Type.InplaceListReversal_List_Cons _15;
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve prev_4 };
    prev_4 <- _14;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    assume { Resolve1.resolve _16 };
    _16 <- next_12;
    assume { Resolve1.resolve head_5 };
    head_5 <- _16;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _9 <- ();
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    _8 <- ();
    assume { Resolve1.resolve _20 };
    _20 <- prev_4;
    assume { Resolve1.resolve ( * l_1) };
    l_1 <- { l_1 with current = _20 };
    goto BB16
  }
  BB15 {
    goto BB4
  }
  BB16 {
    assume { Resolve2.resolve l_1 };
    goto BB17
  }
  BB17 {
    _0 <- ();
    goto BB18
  }
  BB18 {
    assume { Resolve1.resolve head_5 };
    goto BB19
  }
  BB19 {
    return _0
  }
  
end
